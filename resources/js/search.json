[[{"i":"rand-projects","l":"\uD83C\uDFE0 Rand Projects","p":["Please navigate using the left menu or continue below"]}],[{"i":"linux-vehicle-to-home-charger-hacking","l":"(Linux) Vehicle to Home Charger Hacking","p":["GitHub Repo","Nissan Leaf domestic bi-directional charger - DALL·E 3"]},{"i":"project-overview","l":"\uD83C\uDF1F Project Overview","p":["The BeagleBone-V2H project focused on the reverse engineering and experimentation of an Indra Vehicle to Grid (V2G) bi-directional charging system. The aim was to replicate the functionality of the existing system with local control only. This involved building a completely new BeagleBone firmware image, writing custom kernel overlays for hardware support, and developing a bespoke application in Rust. Additionally, a SvelteKit webUI was prototyped to provide local user control through a websockets interface. Upon completing a proof of concept, a load matching Vehicle to Home (V2H) feature was added so that the connected electric vehicle could safely power an entire home and charge from excess solar automatically."]},{"i":"stages","l":"\uD83D\uDD11 Stages","p":["Dumped eMMC image of existing firmware, extracted configs, and decompiled main executable","Ghidra for reverse engineering existing C++ CHAdeMO V2G firmware","Extracted boot and runtime logs through TTL UART","Retained access to hardware components using bespoke Linux kernel overlays","Designed custom libraries for EV DC rapid charging CHAdeMO CAN, PRE 6kW bi-directional CAN charger, STMicro STPM3x SPI energy monitor, Analog Devices AD7237 SPI ADC, and Philips PCA95xx I2C GPIO extender","Developed a ground-up replacement application in Rust with the aim of cloud disconnection and local control only.","Conducted experiments on adapting the CHAdeMO interface using pyPLC to enable CCS for EV charging using GreenPHY for protocol communication."]},{"i":"technical-stack","l":"\uD83D\uDEE0️ Technical Stack","p":["Rust with Tokio async runtime.","SQLx for database interactions.","Async SocketCAN for CAN network communication.","I2C and SPI for interfacing with STMicro energy monitor, Analog Devices ADC, and Philips GPIO panel interface.","Tokio Tungstenite websocket API.","SvelteKit web interface.","SQLite3 for local events recording and datalogging.","JSON based charging/discharging scheduler.","Existing BeagleBone Green- Texas Instruments (Ti) System-on-Chip (SoC).","Linux Debian 10- SD boot."]}],[{"i":"stm32-energy-storage","l":"(STM32) Energy Storage","p":["GitHub Repo"]},{"i":"project-overview","l":"\uD83C\uDF1F Project Overview","p":["Project Toucan is a fully asynchronous EV battery to ESS storage CAN bus protocol converter. Built on the Rust Embassy-rs framework. This project was developed to enable domestic solar hybrid inverters to use unmodified EV batteries. Some have coined the term second life batteries, which represents used EV batteries being given a second chance after losing much of their capacity and being remanufactured into a new form factor. This project rejects that idea and aims to use unmodified EV packs much like commercial BESS systems. Each EV pack contains industry compliant contactors and battery management, and in turn presents real time data for health monitoring and fault detection.","This project combines the utility of EV batteries and uses inexpensive STMicro dual CAN bus controllers to safely manage each pack and emulate domestic battery CAN protocols required to operate a solar hybrid inverter. A further rationale behind this project is the per price per kWh for lithium battery storage. As of 2023, PylonTech batteries cost approximately £300/kWh where as used EV packs can be sourced from EV recycling businesses for approximately £60/kWh and range in size from 22kWh for an early Renault Zoe, to 82kWh from a Tesla Model 3.","Hardware: STM32F407 https://www.aliexpress.com/item/1005001620616382.html?channel=twinner Software: Rust no_std, Embassy"]},{"i":"️-hardware-support","l":"⚡️ Hardware Support","p":["Compatible EV batteries","Solar Hybrid battery emulation","Supported CAN bus inverters","Renault Zoe Ph1 (22kWh -> 44kWh)","BYD","Solax X1/X3 & FoxESS AC1/AC3, H1, H3, K-Series","Renault Zoe Ph2 (52kWh)","Triple Power & FoxESS V1 & V2","GoodWe GW9000","Renault Kangoo","PylonTech & PylonTech Force H2","Deye & Sunsynk HV","Tesla Model 3 (WIP - Contactors 100% ok)","Victron (BYD)","Solis HV"]}],[{"i":"esp32-abb-power-one-aurora-solar-inverter-to-mqtt","l":"(ESP32) ABB Power-One Aurora Solar Inverter to MQTT","p":["Repo","Used for reading solar energy data and outputting to MQTT states using the Aurora protocol. Can be configured to read multiple RS485 instruments.","Hardware: Espressif ESP32C3 - M3Stamp-C3 https://docs.m5stack.com/en/core/stamp_c3 Software: Rust, ESP-IDF-HAL https://github.com/esp-rs/esp-idf-hal Home Assistant MQTT data Raw MQTT states","Based on an old reverse engineering project which extracted the master access code from a given serial number to elevate privileges. Algorithm and hardcoded seed was found by decompiling ABB management software (VB.net) and porting to Python, and integrating into an existing Aurora library.","ABB Export Limit"]}],[{"i":"linux-samsung-heatpump-controller","l":"(Linux) Samsung Heatpump controller","p":["Repo","Samsung MIM-B19N modbus control","Proof of concept command line control of a Samsung heat pump prototyped in Rust.","Uses RS485 on /dev/ttyUSB0 and keyboard entry for modifying temperature parameters and switching between modes (WIP)","Hardware: USB to RS485 converter Software: Rust, Tokio Samsung Hardware RS485 Interface: https://www.samsung.com/uk/support/model/MIM-B19N/"]}],[{"i":"stm32-nissan-leaf-ev-can-spy","l":"(STM32) Nissan Leaf EV CAN Spy","p":["Repo","Used for reading Nissan EV battery controller data from OBD2 port and outputting to a JSON payload.","JSON payload is received by a ESP01/NodeMCU flashed with Tasomota firmware. Payload is then forwarded as an MQTT message which is then used by OpenEVSE for SoC monitoring and Home Assistant for datalogging. Due to the dual CAN interfaces of this board, both Leaf CAN buses can be monitored for realtime datalogging.","Hardware: STMF32105 - aka £9 AliExpress CAN filter https://www.aliexpress.com/item/1005005919692162.html?channel=twinner Software: Rust no_std, Embassy","Home Assistant MQTT data OpenEVSE charge limiting"]}],[{"l":"University Projects"},{"l":"Final Thesis","p":["Agile Development and Experimentation:","Automate data collection through VT submissions and analyze it using statistical software to guide further development","Automated Build Script Implementation:","Collect and analyze sample data from VT to refine the malware attributes and binaries.","Compare and contrast the findings from each iteration to identify the most effective evasion strategies","Compare and Select Malware Attributes:","Create and test an automated build script capable of generating unique malware binaries with various compiler options.","Data Analysis from VirusTotal (VT):","Design and develop four functionally distinct malware binaries in Rust and C++","Develop evasion improvements for Rust-based malware","Develop Malware Binaries:","Employ Agile methodology to iterate the development process, experimenting with source code modifications to enhance evasion techniques.","Evaluate a range of malware attributes to determine their viability and effectiveness","Findings Comparison:","Implement a rigorous testing framework to assess the effectiveness of various evasion techniques","Rust to generate more evasive malware than C++","The project commences in January 2024 and concludes with the submission of the thesis in April 2024."]},{"l":"Security and Forensic Tools"},{"l":"OpenStego-dict","p":["Repo","Modification of Syvaidya's OpenStego steganography tool.","Added command line feature to perform dictionary attacks on steganography images as part of a CompSci forensics module"]}]]